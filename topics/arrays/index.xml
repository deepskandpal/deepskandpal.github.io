<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Arrays on 404EngineerNotFound</title><link>https://deepskandpal.github.io/topics/arrays/</link><description>Recent content in Arrays on 404EngineerNotFound</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 11 Jun 2025 20:16:53 +0530</lastBuildDate><atom:link href="https://deepskandpal.github.io/topics/arrays/index.xml" rel="self" type="application/rss+xml"/><item><title>Arbitrary_sum</title><link>https://deepskandpal.github.io/dsa-log/arbitrary_sum/</link><pubDate>Wed, 11 Jun 2025 20:16:53 +0530</pubDate><guid>https://deepskandpal.github.io/dsa-log/arbitrary_sum/</guid><description>&lt;h2 id="problem-description-optional-summary">Problem Description (Optional Summary)&lt;/h2>
&lt;p>The Problem: Write a function that takes such an array A representing integer D and updates it in-place to represent D + 1. Handle potential carries, including the case where the number of digits increases (like 99 + 1 = 100).&lt;/p>
&lt;h2 id="solution-approach">Solution Approach&lt;/h2>
&lt;p>Brute-Force (and why it’s often not allowed/intended):&lt;/p>
&lt;p>Convert the array [1, 2, 9] into the integer 129.
Add 1: 129 + 1 = 130.
Convert 130 back into an array [1, 3, 0].
Limitation: This fails if the integer D is larger than the maximum value the language’s built-in integer type can hold (this isn’t an issue for Python’s runtime integers, but the problem setup often simulates fixed-precision constraints or asks you to avoid this conversion). It also doesn’t modify the array in-place directly.&lt;/p></description></item><item><title>Two Sum</title><link>https://deepskandpal.github.io/dsa-log/two-sum/</link><pubDate>Wed, 01 May 2024 10:00:00 +0000</pubDate><guid>https://deepskandpal.github.io/dsa-log/two-sum/</guid><description>&lt;h2 id="problem-description-optional-summary">Problem Description (Optional Summary)&lt;/h2>
&lt;p>Given an array of integers &lt;code>nums&lt;/code> and an integer &lt;code>target&lt;/code>, return indices of the two numbers such that they add up to &lt;code>target&lt;/code>.&lt;/p>
&lt;h2 id="solution-approach">Solution Approach&lt;/h2>
&lt;p>Use a hash map (dictionary in Python) to store numbers encountered so far and their indices. For each number, check if &lt;code>target - current_number&lt;/code> exists in the hash map. If it does, we found the pair. Otherwise, add the current number and its index to the map.&lt;/p></description></item></channel></rss>