<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elements of Programming interviews in python on 404EngineerNotFound</title><link>https://deepskandpal.github.io/bookshelf/elements-of-programming/</link><description>Recent content in Elements of Programming interviews in python on 404EngineerNotFound</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 23 Feb 2024 10:00:00 +0000</lastBuildDate><atom:link href="https://deepskandpal.github.io/bookshelf/elements-of-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter 5: Arrays</title><link>https://deepskandpal.github.io/bookshelf/elements-of-programming/chapter-1/</link><pubDate>Wed, 21 Feb 2024 10:00:00 +0000</pubDate><guid>https://deepskandpal.github.io/bookshelf/elements-of-programming/chapter-1/</guid><description>&lt;h1 id="chapter-5-overview">Chapter 5 Overview:&lt;/h1>
&lt;p>This chapter covers the basic properties of arrays (specifically Python lists), common manipulation techniques, and classic array-based problems. It heavily emphasizes thinking about space complexity and optimizing operations.&lt;/p>
&lt;h2 id="think-of-arrays-like-this">Think of arrays like this:&lt;/h2>
&lt;p>Imagine a row of numbered boxes, right next to each other in memory.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Contiguous&lt;/strong>: The boxes are physically adjacent. This is crucial for performance.&lt;/li>
&lt;li>&lt;strong>Indexed&lt;/strong>: You can instantly jump to any box if you know its number (index). This is O(1) access.&lt;/li>
&lt;li>&lt;strong>Homogeneous (usually)&lt;/strong>: Typically, all boxes hold the same type of item (like all integers or all strings), though Python lists offer more flexibility.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="why-arrays-are-important-especially-for-interviews">Why Arrays Are Important (Especially for Interviews):&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Efficiency&lt;/strong>: Direct access by index is super fast (O(1)).&lt;/li>
&lt;li>&lt;strong>Memory Locality&lt;/strong>: Because elements are stored together, accessing sequential elements is often cache-friendly, leading to good practical performance.&lt;/li>
&lt;li>&lt;strong>Building Blocks&lt;/strong>: Many other data structures (like hash maps, heaps, stacks, queues) are often &lt;em>implemented&lt;/em> using arrays underneath.&lt;/li>
&lt;li>&lt;strong>In-Place Operations&lt;/strong>: Interviewers love problems where you modify the array directly without using significant extra memory (O(1) space). This often involves clever use of pointers or swapping elements.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="array-boot-camp-reordering-array-entries-page-1">Array Boot Camp: Reordering Array Entries (Page 1)&lt;/h2>
&lt;p>The boot camp problem is a fantastic introduction to &lt;strong>in-place array manipulation using multiple pointers&lt;/strong>.&lt;/p></description></item><item><title>Chapter 15: Recursion</title><link>https://deepskandpal.github.io/bookshelf/elements-of-programming/chapter-15/</link><pubDate>Fri, 23 Feb 2024 10:00:00 +0000</pubDate><guid>https://deepskandpal.github.io/bookshelf/elements-of-programming/chapter-15/</guid><description>&lt;h1 id="recursion">Recursion&lt;/h1>
&lt;p>&lt;strong>Core Idea of Recursion&lt;/strong>: At its simplest, recursion means a function calls itself to solve a smaller version of the same problem.&lt;/p>
&lt;p>&lt;a href="https://aistudio.google.com/prompts/1iT6e8TzouWLkMJqnlyvEmF3SBLGpkJJr">Prompt Link&lt;/a>(my private discussion for this chapter using ai studio and this chapters main system prompt along with the pdf of this chapter)&lt;/p>
&lt;p>Two Key Ingredients :&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Base Cases&lt;/strong>: These are the simplest instances of the problem that the function can solve directly, without further recursion.
Intuition: &amp;ldquo;When do I know the answer without asking for more help?&amp;rdquo;&lt;/li>
&lt;li>&lt;strong>Progress (Recursive Call with different arguments):&lt;/strong> The function must call itself with arguments that move it closer to a base case. If it doesn&amp;rsquo;t make progress, it&amp;rsquo;ll loop forever.&lt;/li>
&lt;/ul>
&lt;p>Recursion: The &amp;ldquo;Ask a Mini-Me&amp;rdquo; Approach:&lt;/p></description></item></channel></rss>