<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Writings on 404EngineerNotFound</title><link>https://deepskandpal.github.io/writings/</link><description>Recent content in Writings on 404EngineerNotFound</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 25 Apr 2025 11:00:00 +0000</lastBuildDate><atom:link href="https://deepskandpal.github.io/writings/index.xml" rel="self" type="application/rss+xml"/><item><title>Multi Processing , Multi Threading, AsyncIO: A Guide to Python Concurrency for Data Scientists</title><link>https://deepskandpal.github.io/writings/concurrency-ds/</link><pubDate>Fri, 25 Apr 2025 11:00:00 +0000</pubDate><guid>https://deepskandpal.github.io/writings/concurrency-ds/</guid><description>&lt;p>&lt;strong>The problem : Help! My Python SDXL Script Isn&amp;rsquo;t Faster with Asyncio/Threading/Multiprocessing. Why?&lt;/strong>&lt;/p>
&lt;p>You&amp;rsquo;ve built a cool script, maybe generating image variations with SDXL (&lt;a href="https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0">Stable Diffusion XL model&lt;/a>) like one of our engineers. It works, but it&amp;rsquo;s slow. You think, &amp;ldquo;I know! Parallelism!&amp;rdquo; You try asyncio, then multithreading, maybe even multiprocessing. But&amp;hellip; nothing speeds up significantly, or you just hit weird errors, especially in your Jupyter Notebook. Sounds familiar?&lt;/p>
&lt;p>This is a common hurdle when data science tasks meet heavier computation. Let&amp;rsquo;s demystify Python&amp;rsquo;s asyncio, multithreading, and multiprocessing, touching on the underlying Operating System (OS) ideas and Python&amp;rsquo;s infamous GIL.&lt;/p></description></item></channel></rss>